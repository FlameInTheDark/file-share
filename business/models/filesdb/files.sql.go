// Code generated by sqlc. DO NOT EDIT.
// source: files.sql

package filesdb

import (
	"context"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
insert into files (file_name)
values ($1) returning id, status, file_id, file_name, downloads, created_at
`

func (q *Queries) Create(ctx context.Context, fileName string) (File, error) {
	row := q.db.QueryRowContext(ctx, create, fileName)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.FileID,
		&i.FileName,
		&i.Downloads,
		&i.CreatedAt,
	)
	return i, err
}

const find = `-- name: Find :one
select id, status, file_id, file_name, downloads, created_at
from files
where file_id = $1
`

func (q *Queries) Find(ctx context.Context, fileID uuid.UUID) (File, error) {
	row := q.db.QueryRowContext(ctx, find, fileID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.FileID,
		&i.FileName,
		&i.Downloads,
		&i.CreatedAt,
	)
	return i, err
}

const increase = `-- name: Increase :exec
update files
set downloads = downloads + 1
where id = $1
`

func (q *Queries) Increase(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, increase, id)
	return err
}

const stats = `-- name: Stats :one
select downloads from files where file_id = $1
`

func (q *Queries) Stats(ctx context.Context, fileID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, stats, fileID)
	var downloads int64
	err := row.Scan(&downloads)
	return downloads, err
}

const uploaded = `-- name: Uploaded :one
update files
set status = 'uploaded'
where file_id = $1 returning id, status, file_id, file_name, downloads, created_at
`

func (q *Queries) Uploaded(ctx context.Context, fileID uuid.UUID) (File, error) {
	row := q.db.QueryRowContext(ctx, uploaded, fileID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.FileID,
		&i.FileName,
		&i.Downloads,
		&i.CreatedAt,
	)
	return i, err
}
